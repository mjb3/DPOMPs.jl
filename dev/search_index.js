var documenterSearchIndex = {"docs":
[{"location":"models/#Models","page":"Models","title":"Models","text":"","category":"section"},{"location":"models/#Guide","page":"Models","title":"Guide","text":"","category":"section"},{"location":"models/#Predefined-models","page":"Models","title":"Predefined models","text":"","category":"section"},{"location":"models/#Customising-predefined-models","page":"Models","title":"Customising predefined models","text":"","category":"section"},{"location":"models/#Custom-models-from-scratch","page":"Models","title":"Custom models from scratch","text":"","category":"section"},{"location":"models/#Model-directory","page":"Models","title":"Model directory","text":"","category":"section"},{"location":"models/#Epidemiological-models","page":"Models","title":"Epidemiological models","text":"","category":"section"},{"location":"models/#SIR-model","page":"Models","title":"SIR model","text":"","category":"section"},{"location":"models/","page":"Models","title":"Models","text":"The canonical Kermack-McKendrick susceptible-infectious-recovered model is perhaps the best known example of state-space models within epidemiology.","category":"page"},{"location":"models/","page":"Models","title":"Models","text":"<img src=\"https://raw.githubusercontent.com/mjb3/DPOMPs.jl/master/docs/img/sir.png\" alt=\"SIR model\" style=\"height: 60px;\"/>","category":"page"},{"location":"models/#SI-model","page":"Models","title":"SI model","text":"","category":"section"},{"location":"models/","page":"Models","title":"Models","text":"The susceptible-infectious model is the simplest conceptual example; two states and only one type event.","category":"page"},{"location":"models/","page":"Models","title":"Models","text":"<img src=\"https://raw.githubusercontent.com/mjb3/DPOMPs.jl/master/docs/img/si.png\" alt=\"SI model\" style=\"height: 60px;\"/>","category":"page"},{"location":"models/#SIS-model","page":"Models","title":"SIS model","text":"","category":"section"},{"location":"models/","page":"Models","title":"Models","text":"Another common derivative of the SIR model.","category":"page"},{"location":"models/","page":"Models","title":"Models","text":"<img src=\"https://raw.githubusercontent.com/mjb3/DPOMPs.jl/master/docs/img/sis.png\" alt=\"SI model\" style=\"height: 60px;\"/>","category":"page"},{"location":"models/#SEI-model","page":"Models","title":"SEI model","text":"","category":"section"},{"location":"models/","page":"Models","title":"Models","text":"The SEI model includes an 'exposed' state, i.e. for modelling communicable diseases with latent non-infectious periods.","category":"page"},{"location":"models/","page":"Models","title":"Models","text":"<img src=\"https://raw.githubusercontent.com/mjb3/DPOMPs.jl/master/docs/img/sei.png\" alt=\"SI model\" style=\"height: 60px;\"/>","category":"page"},{"location":"models/#SEIR-model","page":"Models","title":"SEIR model","text":"","category":"section"},{"location":"models/","page":"Models","title":"Models","text":"Somewhat obviously, the SEIR model concept combines the SEI with the SIR.","category":"page"},{"location":"models/","page":"Models","title":"Models","text":"<img src=\"https://raw.githubusercontent.com/mjb3/DPOMPs.jl/master/docs/img/seir.png\" alt=\"SI model\" style=\"height: 60px;\"/>","category":"page"},{"location":"models/#Others","page":"Models","title":"Others","text":"","category":"section"},{"location":"models/#The-Lotka-Volterra-predator-prey-model","page":"Models","title":"The Lotka-Volterra predator-prey model","text":"","category":"section"},{"location":"models/","page":"Models","title":"Models","text":"<img src=\"https://raw.githubusercontent.com/mjb3/DPOMPs.jl/master/docs/img/lotka.png\" alt=\"SIR model\" style=\"height: 60px;\"/>","category":"page"},{"location":"models/#Ross-MacDonald-two-species-Malaria-model","page":"Models","title":"Ross-MacDonald two-species Malaria model","text":"","category":"section"},{"location":"models/","page":"Models","title":"Models","text":"<img src=\"https://raw.githubusercontent.com/mjb3/DPOMPs.jl/master/docs/img/rossmac.png\" alt=\"SIR model\" style=\"height: 100px;\"/>","category":"page"},{"location":"examples/#Sample-code","page":"Sample code","title":"Sample code","text":"","category":"section"},{"location":"examples/#Defining-a-model","page":"Sample code","title":"Defining a model","text":"","category":"section"},{"location":"examples/#Simulation","page":"Sample code","title":"Simulation","text":"","category":"section"},{"location":"examples/#Inference","page":"Sample code","title":"Inference","text":"","category":"section"},{"location":"examples/#MCMC","page":"Sample code","title":"MCMC","text":"","category":"section"},{"location":"examples/#IBIS","page":"Sample code","title":"IBIS","text":"","category":"section"},{"location":"manual/#Package-manual","page":"Package manual","title":"Package manual","text":"","category":"section"},{"location":"manual/","page":"Package manual","title":"Package manual","text":"Pages = [\"manual.md\"]\nDepth = 3","category":"page"},{"location":"manual/#Index","page":"Package manual","title":"Index","text":"","category":"section"},{"location":"manual/","page":"Package manual","title":"Package manual","text":"","category":"page"},{"location":"manual/#Types","page":"Package manual","title":"Types","text":"","category":"section"},{"location":"manual/#Model","page":"Package manual","title":"Model","text":"","category":"section"},{"location":"manual/","page":"Package manual","title":"Package manual","text":"DPOMPModel\nParticle\nEvent\nObservation","category":"page"},{"location":"manual/#DPOMPs.DPOMPModel","page":"Package manual","title":"DPOMPs.DPOMPModel","text":"DPOMPModel\n\nA mutable struct which represents a DSSCT model (see Models for further details).\n\nFields\n\nmodel_name          – string, e,g, \"SIR\".\nrate_function       – event rate function.\ninitial_condition   – initial condition.\nm_transition        – transition matrix.\n`obs_function         – observation function, use this to add 'noise' to simulated observations.\nobs_model           – observation model likelihood function.\nprior               – prior [multivariate] Distributions.Distribution.\nt0_index            – index of the parameter that represents the initial time. 0 if fixed at 0.0.\n\n\n\n\n\n","category":"type"},{"location":"manual/#DPOMPs.Particle","page":"Package manual","title":"DPOMPs.Particle","text":"Particle\n\nE.g. the main results of a simulation including the initial and final conditions, but not the full state trajectory.\n\nFields\n\ntheta               – e.g. simulation parameters.\ninitial_condition   – initial system state.\nfinal_condition     – final system state.\ntrajectory          – the event history.\nlog_like            – trajectory log likelihood, mainly for internal use.\n\n\n\n\n\n","category":"type"},{"location":"manual/#DPOMPs.Event","page":"Package manual","title":"DPOMPs.Event","text":"Event\n\nRequires no explanation.\n\nFields\n\ntime        – the time of the event.\nevent_type  – indexes the rate function and transition matrix.\n\n\n\n\n\n","category":"type"},{"location":"manual/#DPOMPs.Observation","page":"Package manual","title":"DPOMPs.Observation","text":"Observation\n\nA single observation. Note that by default val has the same size as the model state space. However that is not necessary - it need only be compatible with the observation model.\n\nFields\n\ntime        – similar to Event.time, the time of the observation.\nobs_id      – <1 if not a resampling step.\nprop        – optional information for the observation model.\nval         – the observation value.\n\n\n\n\n\n","category":"type"},{"location":"manual/#Results","page":"Package manual","title":"Results","text":"","category":"section"},{"location":"manual/","page":"Package manual","title":"Package manual","text":"SimResults\nImportanceSample\nRejectionSample\nMCMCSample\nARQMCMCSample","category":"page"},{"location":"manual/#DPOMPs.SimResults","page":"Package manual","title":"DPOMPs.SimResults","text":"SimResults\n\nThe results of a simulation, including the full state trajectory.\n\nFields\n\nmodel_name      – string, e,g, \"SIR\".\nparticle        – the 'trajectory' variable, of type Particle.\npopulation      – records the final system state.\nobservations    – simulated observations data (an Array of Observation types.)\n\n\n\n\n\n","category":"type"},{"location":"manual/#DPOMPs.ImportanceSample","page":"Package manual","title":"DPOMPs.ImportanceSample","text":"ImportanceSample\n\nThe results of an importance sampling analysis, such as iterative batch importance sampling algorithms.\n\nFields\n\nmu              – weighted sample mean.\ncv              – weighted covariance.\ntheta           – two dimensional array of samples, e.g. parameter; iteration.\nweight          – sample weights.\nrun_time        – application run time.\nbme             – Estimate (or approximation) of the Bayesian model evidence.\n\n\n\n\n\n","category":"type"},{"location":"manual/#DPOMPs.RejectionSample","page":"Package manual","title":"DPOMPs.RejectionSample","text":"RejectionSample\n\nEssentially, the main results of an MCMC analysis, consisting of samples, mean, and covariance matrix.\n\nFields\n\nsamples         – three dimensional array of samples, e.g. parameter; iteration; Markov chain.\nmu              – sample mean.\ncv              – sample covariance matrix.\n\n\n\n\n\n","category":"type"},{"location":"manual/#DPOMPs.MCMCSample","page":"Package manual","title":"DPOMPs.MCMCSample","text":"MCMCSample\n\nThe results of an MCMC analysis, mainly consisting of a RejectionSample.\n\nFields\n\nsamples         – samples of type RejectionSample.\nadapt_period    – adaptation (i.e. 'burn in') period.\nsre             – scale reduction factor estimate, i.e. Gelman diagnostic.\nrun_time        – application run time.\n\n\n\n\n\n","category":"type"},{"location":"manual/#DPOMPs.ARQMCMCSample","page":"Package manual","title":"DPOMPs.ARQMCMCSample","text":"ARQMCMCSample\n\nThe results of an ARQ MCMC analysis including the ImportanceSample and resampled RejectionSample.\n\nThe sre scale factor reduction estimates relate the rejection (re)samples to the underlying importance sample.\n\nFields\n\nimp_sample      – main results, i.e. ImportanceSample.\nsamples         – resamples, of type RejectionSample.\nadapt_period    – adaptation (i.e. 'burn in') period.\ngrid_resolution – number of distinct [possible] sample values along each dimension in the unit cube.\nsample_limit    – maximum number of samples per theta tupple.\ngrid_range      – bounds of the parameter space.\nsre             – scale reduction factor estimate, i.e. Gelman diagnostic. NB. only valid for resamples.\nrun_time        – application run time.\n\n\n\n\n\n","category":"type"},{"location":"manual/#Functions","page":"Package manual","title":"Functions","text":"","category":"section"},{"location":"manual/#Models","page":"Package manual","title":"Models","text":"","category":"section"},{"location":"manual/","page":"Package manual","title":"Package manual","text":"generate_model\ngenerate_custom_model","category":"page"},{"location":"manual/#DPOMPs.generate_model","page":"Package manual","title":"DPOMPs.generate_model","text":"generate_model(model_name, initial_condition; freq_dep = false, obs_error = 2.0)\n\nGenerates an DPOMPModel instance. Observation models are generated using the generate_gaussian_obs_model function, with `σ = obs_error (see that functions entry for further details.)\n\nParameters\n\nmodel_name          – the model, e.g. \"SI\"; \"SIR\"; \"SEIR\"; etc\ninitial_condition   – initial condition.\n\nOptional parameters\n\nfreq_dep            – epidemiological models only, set to true for frequency-dependent contact rates.\nobs_error           – average observation error (default = 2.)\n\nmodel_name options\n\n\"SI\"\n\"SIR\"\n\"SIS\"\n\"SEI\"\n\"SEIR\"\n\"SEIS\"\n\"SEIRS\"\n\"PREDPREY\"\n\"ROSSMAC\"\n\nExamples\n\ngenerate_model(\"SIS\", [100,1])\n\n\n\n\n\n","category":"function"},{"location":"manual/#DPOMPs.generate_custom_model","page":"Package manual","title":"DPOMPs.generate_custom_model","text":"generate_custom_model(model_name, rate_function, initial_condition, m_transition; ... )\n\nGenerates an DPOMPModel instance. Observation models are generated using the generate_gaussian_obs_model function, with `σ = obs_error (see that functions entry for further details.)\n\nParameters\n\nmodel_name          – the model, e.g. \"SIR\", \"SEIR-custom\", etc.\nrate_function       – event rate function.\ninitial_condition   – initial condition\nm_transition        – transition matrix.\n\nOptional parameters\n\n`observation_function – observation function, use this to add 'noise' to simulated observations.\nobs_error           – average observation error (default = 2.)\nobservation_model   – observation model likelihood function.\nprior_density       – prior density function.\nt0_index            – index of the parameter that represents the initial time. 0 if fixed at 0.0.\n\nExamples\n\ngenerate_custom_model(\"SIS\", [100,1])\n\n\n\n\n\n","category":"function"},{"location":"manual/#Simulation","page":"Package manual","title":"Simulation","text":"","category":"section"},{"location":"manual/","page":"Package manual","title":"Package manual","text":"gillespie_sim","category":"page"},{"location":"manual/#DPOMPs.gillespie_sim","page":"Package manual","title":"DPOMPs.gillespie_sim","text":"gillespie_sim(model, parameters; tmax = 100.0, num_obs = 5)\n\nRun a Doob-Gillespie simulation on model. Returns a SimResults type containing the trajectory and observations data, or an array of the same if n_sims > 1.\n\nParameters\n\nmodel       – DPOMPModel (see [DCTMPs.jl models]@ref).\nparameters  – model parameters.\n\nOptional\n\ntmax        – maximum time (default: 100.)\nn_obs       – the number of observations to draw (default: 5.)\nn_sims      – number of simulations to draw (default: 1.)\n\n\n\n\n\n","category":"function"},{"location":"manual/#Inference","page":"Package manual","title":"Inference","text":"","category":"section"},{"location":"manual/","page":"Package manual","title":"Package manual","text":"run_mcmc_analysis\nrun_mbp_ibis_analysis\nrun_smc2_analysis\nrun_arq_mcmc_analysis","category":"page"},{"location":"manual/#DPOMPs.run_mcmc_analysis","page":"Package manual","title":"DPOMPs.run_mcmc_analysis","text":"run_mcmc_analysis(model, obs_data, initial_parameters, steps = 50000, adapt_period = 10000, mbp = true, ppp = 0.3)\n\nParameters\n\nmodel               – DPOMPModel (see [DCTMPs.jl models]@ref).\nobs_data            – Observations data.\n\nRun an n_chains-MCMC analysis. The initial_parameters are sampled from the prior distribution unless otherwise specified by the user.\n\nA Gelman-Rubin convergence diagnostic is automatically carried out for n_chains > 1 and included in the [multi-chain] results.\n\nOtherwise the results of a single-chain analysis are returned, which include the Geweke test statistics computed for that analysis.\n\nOptional\n\nn_chains            – number of Markov chains (optional, default: 3.)\ninitial_parameters  – 2d array of initial model parameters. Each column vector correspondes to a single model parameter.\nsteps               – number of iterations.\nadapt_period        – number of discarded samples.\nmbp                 – model based proposals (MBP). Set mbp = false for standard proposals.\nppp                 – the proportion of parameter (vs. trajectory) proposals in Gibbs sampler. Default: 30%. NB. not required for MBP.\nfin_adapt           – finite adaptive algorithm. The default is false, i.e. [fully] adaptive.\nmvp                 – increase for a higher proportion of 'move' proposals. NB. not applicable if MBP = true (default: 2.)\n\n\n\n\n\n","category":"function"},{"location":"manual/#DPOMPs.run_mbp_ibis_analysis","page":"Package manual","title":"DPOMPs.run_mbp_ibis_analysis","text":"run_mbp_ibis_analysis(model, obs_data, initial_parameters, ess_rs_crit = 0.5; n_props = 3, ind_prop = false, alpha = 1.002)\n\nRun an MBP IBIS analysis based on model and obs_data of type Observations.\n\nParameters\n\nmodel               – DPOMPModel (see [DCTMPs.jl models]@ref).\nobs_data            – Observations data.\nnp                  – number of particles (default = 2000.)\ness_rs_crit         – resampling criteria (default = 0.5.)\nn_props             – MBP mutations per step (default = 3.)\nind_prop            – true for independent theta proposals (default = false.)\nalpha               – user-defined, increase for lower acceptance rate targeted (default = 1.002.)\n\n\n\n\n\n","category":"function"},{"location":"manual/#DPOMPs.run_smc2_analysis","page":"Package manual","title":"DPOMPs.run_smc2_analysis","text":"run_smc2_analysis(model, obs_data, initial_parameters, ess_rs_crit = 0.5; n_props = 3, ind_prop = false, alpha = 1.002)\n\nRun an SMC^2 (i.e. particle filter IBIS) analysis based on model and obs_data of type Observations.\n\nParameters\n\nmodel               – DPOMPModel (see [DCTMPs.jl models]@ref).\nobs_data            – Observations data.\nnp                  – number of particles (default = 2000.)\ness_rs_crit         – resampling criteria (default = 0.5.)\nn_props             – MBP mutations per step (default = 3.)\nind_prop            – true for independent theta proposals (default = false.)\nalpha               – user-defined, increase for lower acceptance rate targeted (default = 1.002.)\n\n\n\n\n\n","category":"function"},{"location":"manual/#DPOMPs.run_arq_mcmc_analysis","page":"Package manual","title":"DPOMPs.run_arq_mcmc_analysis","text":"run_arq_mcmc_analysis(model, ; ... )\n\nRun ARQMCMC analysis with chains Markov chains, where n_chains > 1 the Gelman-Rubin convergence diagnostic is also run.\n\nParameters\n\nmodel               – DPOMPModel (see docs.)\n\nNamed parameters\n\nsample_resolution   – i.e. the length of each dimension in the importance sample.\nsample_limit        – sample limit, should be increased when the variance of model.pdf is high (default: 3.)\nn_chains            – number of Markov chains (default: 3.)\nsteps               – number of iterations.\nburnin              – number of discarded samples.\ntgt_ar              – acceptance rate (default: 0.33.)\nnp                  – number of SMC particles in PF (default: 200.)\ness_crit            – acceptance rate (default: 0.33.)\n\n\n\n\n\n","category":"function"},{"location":"manual/#Utilities","page":"Package manual","title":"Utilities","text":"","category":"section"},{"location":"manual/","page":"Package manual","title":"Package manual","text":"get_observations\ntabulate_results\nprint_results","category":"page"},{"location":"manual/#DPOMPs.get_observations","page":"Package manual","title":"DPOMPs.get_observations","text":"get_observations(source)\n\nParameters\n\nsource      – DataFrame or filepath (i.e. String) containing the data (with times in the first column).\n\nCreate and return an array of type Observation based on a two dimensional array, DataFrame or file location.\n\n\n\n\n\n","category":"function"},{"location":"manual/#DPOMPs.tabulate_results","page":"Package manual","title":"DPOMPs.tabulate_results","text":"tabulate_results\n\nParameters\n\nresults     – a data structure of type MCMCSample, ImportanceSample or ARQMCMCSample.\nproposals   – display proposal analysis (MCMC only).\n\nDisplay the results of an inference analysis.\n\n\n\n\n\n","category":"function"},{"location":"manual/#Visualisation","page":"Package manual","title":"Visualisation","text":"","category":"section"},{"location":"manual/","page":"Package manual","title":"Package manual","text":"plot_trajectory\nplot_parameter_trace\nplot_parameter_marginal\nplot_parameter_heatmap","category":"page"},{"location":"manual/#DPOMPs.plot_trajectory","page":"Package manual","title":"DPOMPs.plot_trajectory","text":"plot_trajectory(x)\n\nParameters\n\nx       – SimResults, i.e. from a call to gillespie_sim.\n\nPlot the trajectory of a a DGA simulation on model using UnicodePlots.jl.\n\n\n\n\n\n","category":"function"},{"location":"manual/#DPOMPs.plot_parameter_trace","page":"Package manual","title":"DPOMPs.plot_parameter_trace","text":"plot_parameter_trace(mcmc, parameter)\n\nParameters\n\nsample      – MCMCSample, ARQMCMCSample or RejectionSample e.g. from a call to ADD XREF.\nparameter   – the index of the model parameter to be plotted.\n\nTrace plot of samples from n MCMC analyses for a given model parameter using UnicodePlots.jl.\n\n\n\n\n\n","category":"function"},{"location":"manual/#DPOMPs.plot_parameter_marginal","page":"Package manual","title":"DPOMPs.plot_parameter_marginal","text":"plot_parameter_marginal(sample, parameter)\n\nPlot the marginal distribution of samples from an MCMC analysis for a given model parameter using UnicodePlots.jl.\n\nParameters\n\nresults     – Results object, e.g. of type MCMCSample.\nparameter   – the index of the model parameter to be plotted.\nadapt_period– Adaptation period to be discarded, only required for RejectionSample.\n\nOptional\n\nuse_is      – Resample IS rather than using MCMC [re]samples (ARQMCMCSample results only.)\n\n\n\n\n\n","category":"function"},{"location":"manual/#DPOMPs.plot_parameter_heatmap","page":"Package manual","title":"DPOMPs.plot_parameter_heatmap","text":"plot_parameter_heatmap(mcmc, x_parameter, y_parameter)\n\nParameters\n\nmcmc        – MCMCResults, e.g. from a call to run_met_hastings_mcmc.\nx_parameter   – the index of the model parameter to be plotted on the x axis.\ny_parameter   – the index of the model parameter to be plotted on the y axis.\n\nPlot the marginal distribution of samples from an MCMC analysis for two model parameters using UnicodePlots.jl.\n\n\n\n\n\n","category":"function"},{"location":"manual/#Advanced-features.","page":"Package manual","title":"Advanced features.","text":"","category":"section"},{"location":"manual/","page":"Package manual","title":"Package manual","text":"This section covers functionality for customised algorithms.","category":"page"},{"location":"manual/","page":"Package manual","title":"Package manual","text":"run_custom_mcmc_analysis\ngenerate_custom_particle","category":"page"},{"location":"manual/#DPOMPs.run_custom_mcmc_analysis","page":"Package manual","title":"DPOMPs.run_custom_mcmc_analysis","text":"run_custom_mcmc_analysis(model, obs_data, trajectory_prop, [x0_prop], ... )\n\nRun an n_chains data-augmented MCMC analysis, based on the Gibbs sampler with a user defined proposal function.\n\nA function for conditionally sampling the initial trajectory variable can optionally be specified, use the Doob-Gillespie algorithm is used by default.\n\nElsewise, this function is equivalent to calling runmcmcanalysis with mbp = false, which invokes the standard Gibbs sampler.\n\nParameters\n\nmodel               – DPOMPModel (see [DCTMPs.jl models]@ref).\nobs_data            – Observations data.\ntrajectory_prop     – .\nx0_prop             – Initial state variable sampler, DGA by default.\n\nOptional\n\nn_chains            – number of Markov chains (optional, default: 3.)\ninitial_parameters  – 2d array of initial model parameters. Each column vector correspondes to a single model parameter.\nsteps               – number of iterations.\nadapt_period        – number of discarded samples.\nppp                 – the proportion of parameter (vs. trajectory) proposals in Gibbs sampler. Default: 0.3, or 30%.\nfin_adapt           – finite adaptive algorithm. The default is false, i.e. [fully] adaptive.\n\n\n\n\n\n","category":"function"},{"location":"manual/#DPOMPs.generate_custom_particle","page":"Package manual","title":"DPOMPs.generate_custom_particle","text":"generate_custom_particle(model, obs_data, trajectory_prop, [x0_prop], ... )\n\nFor use with run_custom_mcmc_analysis(). Initialises a Particle based on an array of type Event. Also evaluates the likelihood function.\n\nParameters\n\nmodel               – DPOMPModel (see [DCTMPs.jl models]@ref).\nobs_data            – Observations data.\ntrajectory          – Array of Event types.\n\nOptional\n\ntheta               – model parameters, sampled from prior unless otherwise specified.\n\n\n\n\n\n","category":"function"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"DPOMPs.jl - Bayesian parameter inference for Discrete-state-space Partially Observed Markov Processes in Julia.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"note: Note\nPlease note that this package is still in development.","category":"page"},{"location":"#What-are-DPOMP-models?","page":"Introduction","title":"What are DPOMP models?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Discrete-state-space (DSS) models are used throughout ecology and other domains to represent systems of interacting components (e.g. people or molecules.)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"A well-known example is the Kermack-McKendrick SIR model:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"<img src=\"https://raw.githubusercontent.com/mjb3/DPOMPs.jl/master/docs/img/sir.png\" alt=\"SIR model\" style=\"height: 60px;\"/>","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"In applied scientific situations, such systems are often difficult to directly observe, and so they are referred to in context as Partially Observed.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Finally, the dynamics (how the system state changes) of the SIR and other DSS models can be represented in continuous time by [a set of coupled] Markov Processes. Specifically, we can define a probability density or likelihood function.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"This is useful outwith the availability of scientific data, because we can construct statistical sampling schemes based on that identity (i.e. the probability density function.) In plain English - it allows us to 'simulate' the model, and thus gain an intuitive understand of those dynamics.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Given some (partially complete) data however, these concepts yield a paradigm for (in this case, Bayesian) statistical inference based on a general class of model:  Discrete-state-space Partially Observed Markov Processes, or DPOMPs.","category":"page"},{"location":"#Package-features","page":"Introduction","title":"Package features","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"DPOMPs.jl is a package for:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Bayesian parameter inference, and\nSimulation of,\nDiscrete-state-space Partially Observed Markov Processes, in Julia.\nIt also includes automated tools for convergence diagnosis and analysis.","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"See the package [source code repository][https://github.com/mjb3/DPOMPs.jl] for instructions.","category":"page"},{"location":"#Overview","page":"Introduction","title":"Overview","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Pages = [\n    \"models.md\",\n    \"examples.md\",\n    \"manual.md\",\n]\nDepth = 2","category":"page"}]
}
